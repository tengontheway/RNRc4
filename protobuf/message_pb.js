/**
 * Created by qx on 6/24/16.
 */
/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pb.ExchangeKeyReq', null, global);
goog.exportSymbol('proto.pb.ExchangeKeyRes', null, global);
goog.exportSymbol('proto.pb.ReqLogin', null, global);
goog.exportSymbol('proto.pb.ResLogin', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ExchangeKeyReq = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ExchangeKeyReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.pb.ExchangeKeyReq.displayName = 'proto.pb.ExchangeKeyReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.pb.ExchangeKeyReq.prototype.toObject = function(opt_includeInstance) {
        return proto.pb.ExchangeKeyReq.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.pb.ExchangeKeyReq} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.pb.ExchangeKeyReq.toObject = function(includeInstance, msg) {
        var f, obj = {
            seed: msg.getSeed()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ExchangeKeyReq}
 */
proto.pb.ExchangeKeyReq.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.pb.ExchangeKeyReq;
    return proto.pb.ExchangeKeyReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ExchangeKeyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ExchangeKeyReq}
 */
proto.pb.ExchangeKeyReq.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setSeed(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb.ExchangeKeyReq} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.ExchangeKeyReq.serializeBinaryToWriter = function(message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ExchangeKeyReq.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.ExchangeKeyReq.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getSeed();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb.ExchangeKeyReq} The clone.
 */
proto.pb.ExchangeKeyReq.prototype.cloneMessage = function() {
    return /** @type {!proto.pb.ExchangeKeyReq} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 seed = 1;
 * @return {number}
 */
proto.pb.ExchangeKeyReq.prototype.getSeed = function() {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.pb.ExchangeKeyReq.prototype.setSeed = function(value) {
    jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ExchangeKeyRes = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ExchangeKeyRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.pb.ExchangeKeyRes.displayName = 'proto.pb.ExchangeKeyRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.pb.ExchangeKeyRes.prototype.toObject = function(opt_includeInstance) {
        return proto.pb.ExchangeKeyRes.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.pb.ExchangeKeyRes} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.pb.ExchangeKeyRes.toObject = function(includeInstance, msg) {
        var f, obj = {
            seed: msg.getSeed()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ExchangeKeyRes}
 */
proto.pb.ExchangeKeyRes.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.pb.ExchangeKeyRes;
    return proto.pb.ExchangeKeyRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ExchangeKeyRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ExchangeKeyRes}
 */
proto.pb.ExchangeKeyRes.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setSeed(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb.ExchangeKeyRes} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.ExchangeKeyRes.serializeBinaryToWriter = function(message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ExchangeKeyRes.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.ExchangeKeyRes.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getSeed();
    if (f !== 0) {
        writer.writeInt64(
            1,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb.ExchangeKeyRes} The clone.
 */
proto.pb.ExchangeKeyRes.prototype.cloneMessage = function() {
    return /** @type {!proto.pb.ExchangeKeyRes} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 seed = 1;
 * @return {number}
 */
proto.pb.ExchangeKeyRes.prototype.getSeed = function() {
    return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.pb.ExchangeKeyRes.prototype.setSeed = function(value) {
    jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ReqLogin = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ReqLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.pb.ReqLogin.displayName = 'proto.pb.ReqLogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.pb.ReqLogin.prototype.toObject = function(opt_includeInstance) {
        return proto.pb.ReqLogin.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.pb.ReqLogin} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.pb.ReqLogin.toObject = function(includeInstance, msg) {
        var f, obj = {
            username: msg.getUsername(),
            password: msg.getPassword()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ReqLogin}
 */
proto.pb.ReqLogin.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.pb.ReqLogin;
    return proto.pb.ReqLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ReqLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ReqLogin}
 */
proto.pb.ReqLogin.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setUsername(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPassword(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb.ReqLogin} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.ReqLogin.serializeBinaryToWriter = function(message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ReqLogin.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.ReqLogin.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getUsername();
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        );
    }
    f = this.getPassword();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb.ReqLogin} The clone.
 */
proto.pb.ReqLogin.prototype.cloneMessage = function() {
    return /** @type {!proto.pb.ReqLogin} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.pb.ReqLogin.prototype.getUsername = function() {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.pb.ReqLogin.prototype.setUsername = function(value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.pb.ReqLogin.prototype.getPassword = function() {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.pb.ReqLogin.prototype.setPassword = function(value) {
    jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.ResLogin = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.ResLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.pb.ResLogin.displayName = 'proto.pb.ResLogin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.pb.ResLogin.prototype.toObject = function(opt_includeInstance) {
        return proto.pb.ResLogin.toObject(opt_includeInstance, this);
    };


    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.pb.ResLogin} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.pb.ResLogin.toObject = function(includeInstance, msg) {
        var f, obj = {
            bsuccess: msg.getBsuccess(),
            token: msg.getToken(),
            msgserverip: msg.getMsgserverip(),
            msgserverport: msg.getMsgserverport()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.ResLogin}
 */
proto.pb.ResLogin.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.pb.ResLogin;
    return proto.pb.ResLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.ResLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.ResLogin}
 */
proto.pb.ResLogin.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setBsuccess(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setToken(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setMsgserverip(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setMsgserverport(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb.ResLogin} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.ResLogin.serializeBinaryToWriter = function(message, writer) {
    message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.ResLogin.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    this.serializeBinaryToWriter(writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.ResLogin.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined;
    f = this.getBsuccess();
    if (f) {
        writer.writeBool(
            1,
            f
        );
    }
    f = this.getToken();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
    f = this.getMsgserverip();
    if (f.length > 0) {
        writer.writeString(
            3,
            f
        );
    }
    f = this.getMsgserverport();
    if (f.length > 0) {
        writer.writeString(
            4,
            f
        );
    }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb.ResLogin} The clone.
 */
proto.pb.ResLogin.prototype.cloneMessage = function() {
    return /** @type {!proto.pb.ResLogin} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool bSuccess = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.pb.ResLogin.prototype.getBsuccess = function() {
    return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.pb.ResLogin.prototype.setBsuccess = function(value) {
    jspb.Message.setField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.pb.ResLogin.prototype.getToken = function() {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.pb.ResLogin.prototype.setToken = function(value) {
    jspb.Message.setField(this, 2, value);
};


/**
 * optional string msgServerIP = 3;
 * @return {string}
 */
proto.pb.ResLogin.prototype.getMsgserverip = function() {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.pb.ResLogin.prototype.setMsgserverip = function(value) {
    jspb.Message.setField(this, 3, value);
};


/**
 * optional string msgServerPort = 4;
 * @return {string}
 */
proto.pb.ResLogin.prototype.getMsgserverport = function() {
    return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.pb.ResLogin.prototype.setMsgserverport = function(value) {
    jspb.Message.setField(this, 4, value);
};


goog.object.extend(exports, proto.pb);
